#!/bin/sh

##    Copyright Â© 2016 Rowan Thorpe, initially based entirely on a "taskdb" demo-app
##    posted by Joe Bogner at http://picolisp.com/wiki/?taskdb on 24 August 2016, and
##    has been developed extensively from there.
##
##    This file is part of Taskwrangle.
##
##    Taskwrangle is free software: you can redistribute it and/or modify
##    it under the terms of the GNU Affero General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    Taskwrangle is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU Affero General Public License for more details.
##
##    You should have received a copy of the GNU Affero General Public License
##    along with Taskwrangle.  If not, see <http://www.gnu.org/licenses/>.

#NB: Still do (symbols 'taskwrangle 'pico) here as (load) auto reverts to (symbols 'pico) at end
cmdline='exec __PL_PREFIX__/bin/picolisp __PL_PREFIX__/lib/picolisp/lib.l -'\''load "__CONFDIR__/taskwrangle.l" "__LIBDIR__/libtaskwrangle.l"'\'' -"symbols '\''taskwrangle '\''pico" -'\''connectdb'\'''
terminal_width=${COLUMNS:-$(stty size | cut -d' ' -f2 || printf '80')}

choplonglines=0
dryrun=0
while test ${#} -ne 0; do
    case "${1}" in
        -h|--help)
            cat <<EOF
Usage: $(printf '%s' "${0}" | sed -e 's:^.*/\([^/]\+\)$:\1:') [OPTIONS] [--] [ARGS]

Picolisp task-manager. Runs interactively when attached to an interactive
terminal session without args specified. Otherwise without args reads commands
from STDIN until EOF. Otherwise, runs provided args in sequence. Run '(help)'
for quick-list of commands. Run '(bye)' in interactive session to exit.

OPTIONS:
 -h, --help            : This message
 -S, --chop-long-lines : Truncate displayed lines to terminal width, same as
                         the flag used by "less"
 -n, --dry-run         : Display final commandline instead of eval-ing it

ARGS:
 Forces non-interactive use. Enter shell-escaped picolisp commands without
 enclosing parentheses (like what is used for normal noninteractive use of
 picolisp). For example:

taskwrangle help

 executes as:

$("${0}" -n help | sed -r -e "s/(.{$(expr ${terminal_width} - 1 || :)})/\\1\\n/g" | sed -r -e '$! s/$/\\/')

EOF
            exit 0
            ;;
        -S|--chop-long-lines)
            choplonglines=1
            shift
            ;;
        -n|--dry-run)
            dryrun=1
            shift
            ;;
        --)
            shift
            break
            ;;
        -*)
            printf 'Unknown flag "%s"\n' "${1}" >&2
            exit 1
            ;;
        *)
            break
            ;;
    esac
done

if test ${#} -ne 0; then
    for _arg do
        cmdline="${cmdline} -'$(printf '%s' "${_arg}" | sed -r -e "s/'/'\\\\''/g")'"
    done
    cmdline="${cmdline} -bye"
elif ! tty -s; then
    cmdline="${cmdline} -'prog $(sed -r -e "s/'/'\\\\''/g")' -bye"
#TODO: this would be better, and not hit commandline-length limits, but why doesn't it work?
#    cmdline="${cmdline} -'in NIL (run (pack "(prog " (till NIL T) ")"))' -bye"
else
    cmdline="${cmdline} +"
fi
test 0 -eq ${choplonglines} || cmdline="${cmdline} | sed -r -e \"s/^(.{\${terminal_width}}).*\\\$/\\1/\""
if test 1 -eq ${dryrun}; then
    printf '%s\n' "${cmdline}"
else
    eval "${cmdline}"
fi
